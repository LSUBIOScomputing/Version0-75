is.language(far1$call$family)
is.symbol(far1$call$family)
library(geeM)
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson,
corstr="ar1")
family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr="ar1")
family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family="poisson", corstr="ar1")
family(far1)
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
family(resplogit)
family(respcauchit)
family(respcauchit)$family
?quasi
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="logit"), corstr = "m-dep" , Mv=1)
family(respcauchit)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="qcauchy"), corstr = "m-dep" , Mv=1)
family(respcauchit)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="logit"), corstr = "m-dep" , Mv=1)
family(respcauchit)
family.glm(respcauchit)
library(geeM)
?geem
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio,
corstr = "m-dep" , Mv=1)
resplogit
family(resplogit)
index <- which(!is.na(pmatch(c("binomial", "poisson", "normal", "gaussian", "inverse.gaussian", "Gamma", "quasi"), as.character(resplogit$call$family))))
index
resplogit$call$family
?match.call
binomial()
binomial()$family
resplogit$family
resplogit$FunList
library(geeM)
binomial()
str(binomial())
?geem
library(geeM)
### EXPECT ALL WILL GIVE THE SAME THING
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
family(far1)
?geem
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr="ar1")
family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family="poisson", corstr="ar1")
family(far1)
binomial
get("binomial", mode="function")
binomial()
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="logit"), corstr = "m-dep" , Mv=1)
family(respcauchit)
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
summary(respl)
family(respl)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="logit"), corstr = "m-dep" , Mv=1)
family(respcauchit)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
family(resplogit)
family(respcauchit)$family
family(respcauchit)
binomial()
binomial()$family
binomial <- binomial()
binomial$family
binomial$linkfun
binomial$family
library(geeM)
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
summary(respl)
family(respl)
library(geeM)
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
family(resplogit)
family(respcauchit)$family
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = quasibinomial(link="logit"), corstr = "m-dep" , Mv=1)
family(respcauchit)
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
summary(respl)
family(respl)
library(geeM)
data("ohio", package="geepack")
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
summary(respl)
family(respl)
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
family(respl)
data("ohio", package="geepack")
respl <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial", corstr = "m-dep" , Mv=1)
family(respl)
library(geeM)
library(testthat)
?expect_equivalent
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
f1 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr="ar1")
f2 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family="poisson", corstr="ar1")
f3 <- family(far1)
expect_equivalent(f3$family, f1$family)
expect_equivalent(f3$family, f4$family)
expect_equivalent(f3, f1)
expect_equivalent(f3, f2)
expect_equivalent(f1, f2)
far1 <- geem(count~ time, id=subject ,data = testdat, corstr="ar1")
f4 <- family(far1)
family(f4)
f4
far1 <- geem(count~ time, id=subject ,family="gaussian",data = testdat, corstr="ar1")
far1 <- geem(count~ time, id=subject ,family="gaussian",data = testdat, corstr="ar1")
f5 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, corstr="ar1")
f4 <- family(far1)
far1 <- geem(count~ time, id=subject ,family="gaussian",data = testdat, corstr="ar1")
f5 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian,data = testdat, corstr="ar1")
f6 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian(),data = testdat, corstr="ar1")
f7 <- family(far1)
test_that("Default family comes up as gaussian",{
expect_equivalent(f4,f5)
expect_equivalent(f4,f6)
expect_equivalent(f4,f7)
})
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
f8 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial",
corstr = "m-dep" , Mv=1)
f9 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial(),
corstr = "m-dep" , Mv=1)
f10 <- family(resplogit)
test_that("Binomial always comes up as binomial"{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
}
test_that("Binomial always comes up as binomial"{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
})
test_that("Binomial always comes up as binomial",{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
})
test_that("Default family comes up as gaussian",{
expect_equivalent(f4,f5)
expect_equivalent(f4,f6)
expect_equivalent(f4,f7)
})
test_that("Binomial always comes up as binomial",{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
})
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
test_that("user-defined link comes up as quasi",{
expect_equivalent(family(respcauchit)$family, "quasi")
})
library(geeM)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
library(geeM)
diag
diag(matrix(c(1,0,0,0,1,0, 0,0,1), nrow=3))
diag(Matrix(c(1,0,0,0,1,0, 0,0,1), nrow=3))
library(testthat)
### EXPECT ALL WILL GIVE THE SAME THING
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
f1 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr="ar1")
f2 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family="poisson", corstr="ar1")
f3 <- family(far1)
test_that("Three forms of poisson family are equivalent",{
expect_equivalent(f1,f2)
expect_equivalent(f1,f3)
})
far1 <- geem(count~ time, id=subject ,data = testdat, corstr="ar1")
f4 <- family(far1)
far1 <- geem(count~ time, id=subject ,family="gaussian",data = testdat, corstr="ar1")
f5 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian,data = testdat, corstr="ar1")
f6 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian(),data = testdat, corstr="ar1")
f7 <- family(far1)
test_that("Default family comes up as gaussian",{
expect_equivalent(f4,f5)
expect_equivalent(f4,f6)
expect_equivalent(f4,f7)
})
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
f8 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial",
corstr = "m-dep" , Mv=1)
f9 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial(),
corstr = "m-dep" , Mv=1)
f10 <- family(resplogit)
test_that("Binomial always comes up as binomial",{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
})
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
test_that("user-defined link comes up as quasi",{
expect_equivalent(family(respcauchit)$family, "quasi")
})
far1 <- geem(count~ time, id=subject ,weights=rep(1,dim(testdat)[1]),data = testdat, family=poisson(), corstr="ar1")
rungeem <- function(){
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
return(far1)
}
rungeem()
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
rungeem <- function(dat){
far1 <- geem(count~ time, id=subject ,data = dat, family=poisson(), corstr="ar1")
return(far1)
}
rungeem(dat)
rungeem(testdat)
library(geeM)
317*12
198*12
install.packages("MuMIn", repos="http://R-Forge.R-project.org")
?getQIC
library(MuMIn)
?getQIC
getQIC
?getQIC.geem
?MuMIn
library(geepack)
library(geeM)
data(ohio)
fit2 <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=binomial, corstr="exch", scale.fix=TRUE)
QIC(fit2)
?install.packages
install.packages("MuMIn", repos="http://R-Forge.R-project.org", type="source")
install.packages("MuMIn", repos = "http://R-Forge.R-project.org",
type="source")
library(MuMIn)
?QIC
library(geeM)
library(geepac)
library(geepack)
data(ohio)
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
fit <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=FunList, corstr="exch", scale.fix=TRUE)
fit2 <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=binomial, corstr="exch", scale.fix=TRUE)
getQIC.geem(fit2)
QIC(fit2)
family(fit2)
binomial()
typeof(binomial())
?family
inherits(binomial(), family)
?inherits
inherits(binomial(), "family")
inherits(binomial(), "dog")
inherits(binomial(), "object")
inherits(poisson, "family")
library(geeM)
library(geeM)
fit2 <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=binomial, corstr="exch", scale.fix=TRUE)
QIC(fit2)
family(fit2)
library(geeM)
fit2 <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=binomial, corstr="exch", scale.fix=TRUE)
QIC(fit2)
family(fit2)
str(familt(fit2))
str(family(fit2))
library(testthat)
### EXPECT ALL WILL GIVE THE SAME THING
generatedata <- function(beta,alpha,gamma,X,T,n)  {
mean.vec <- exp(crossprod(t(X),beta))
y <- matrix(0,nrow=n,ncol=T)
y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)
for (i in 1:n)  {
for (t in 2:T)  {
innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))
I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)
first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma
second.shape <- mean.vec[t-1]/gamma - first.shape
u <- rbeta(1,shape1 = first.shape,shape2=second.shape)
a <- rbinom(1,size=y[i,t-1],prob=u)
y[i,t] = a + I
}
}
longform <- c(t(y))
print(apply(y,2,mean))
simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))
return(simdata)
}
X <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))
testdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr="ar1")
f1 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr="ar1")
f2 <- family(far1)
far1 <- geem(count~ time, id=subject ,data = testdat, family="poisson", corstr="ar1")
f3 <- family(far1)
test_that("Three forms of poisson family are equivalent",{
expect_equivalent(f1,f2)
expect_equivalent(f1,f3)
})
far1 <- geem(count~ time, id=subject ,data = testdat, corstr="ar1")
f4 <- family(far1)
far1 <- geem(count~ time, id=subject ,family="gaussian",data = testdat, corstr="ar1")
f5 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian,data = testdat, corstr="ar1")
f6 <- family(far1)
far1 <- geem(count~ time, id=subject ,family=gaussian(),data = testdat, corstr="ar1")
f7 <- family(far1)
test_that("Default family comes up as gaussian",{
expect_equivalent(f4,f5)
expect_equivalent(f4,f6)
expect_equivalent(f4,f7)
})
f4
data("ohio", package="geepack")
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,
corstr = "m-dep" , Mv=1)
f8 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = "binomial",
corstr = "m-dep" , Mv=1)
f9 <- family(resplogit)
resplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial(),
corstr = "m-dep" , Mv=1)
f10 <- family(resplogit)
test_that("Binomial always comes up as binomial",{
expect_equivalent(f8, f9)
expect_equivalent(f8, f10)
})
LinkFun <- function(arg){qcauchy(arg)}
InvLink <- function(arg){pcauchy(arg)}
InvLinkDeriv <- function(arg){dcauchy(arg)}
VarFun <- function(arg){arg*(1-arg)}
FunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)
respcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = "m-dep" , Mv=1)
test_that("user-defined link comes up as quasi",{
expect_equivalent(family(respcauchit)$family, "quasi")
})
test_that("user-defined link comes up as custom",{
expect_equivalent(family(respcauchit)$family, "custom")
})
QIC(fit)
fit3 <- geem(resp ~ age + smoke + age:smoke, id=id, data=ohio, family=quasibinomial, corstr="exch", scale.fix=TRUE)
QIC(fit3)
family(fit3)
fit2
fit3
library(geeM)
library(geeM)
?geem
?geeM
source("inst/tests/testfamily.R")
library(geeM)
source("inst/tests/testfamily.R")
