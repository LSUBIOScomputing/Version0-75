{
    "contents" : "library(testthat)\n\ntest_that(\"Results are reproducible\",{\n  t1 <- assim(100, 1, 3, haz=\"weibull\")\n  t2 <- assim(100, 1, 3, haz=\"weibull\", seed=get.seed(t1))\n  expect_equivalent(as.numeric(t1), as.numeric(t2))\n})\n\nt1 <- assim(100, 1, 3, haz=\"weibull\")\nt2 <- assim(100, 1, 3, haz=\"weibull\", add=function(x) 0, tol=1e-5, seed=get.seed(t1))\n#expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n\nexpectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n\nif(!all(abs(t1-t2) < 2*attr(t2, \"tol\")) & all(abs(sort(t1)-sort(t2)) < 2*attr(t2, \"tol\"))){\n  warning(\"Sorting of times is not as expected\")\n}\n\n\ntest_that(\"Adding 0 still gives values within 2*tol\",{\n  t1 <- assim(100, 1, 3, haz=\"gompertz\")\n  t2 <- assim(100, 1, 3, haz=\"gompertz\", add=function(x) 0, tol=1e-5,  seed=get.seed(t1))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n  \n  t1 <- assim(100, 1, 3, haz=\"loglogistic\")\n  t2 <- assim(100, 1, 3, haz=\"loglogistic\", add=function(x) 0, tol=1e-5, seed=get.seed(t1))\n  #expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n  \n  t1 <- assim(100, 1, 3, haz=\"weibull\")\n  t2 <- assim(100, 1, 3, haz=\"weibull\", add=function(x) 0, tol=1e-5, seed=get.seed(t1))\n  #expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n})\n\ntest_that(\"Multiplying by 1 still gives values within 2*tol\",{\n    \n  t1 <- assim(100, 1, 3, haz=\"gompertz\")\n  t2 <- assim(100, 1, 3, haz=\"gompertz\", prop=function(x) 1, tol=1e-5, seed=get.seed(t1))\n  #expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n  \n  t1 <- assim(100, 1, 3, haz=\"loglogistic\")\n  t2 <- assim(100, 1, 3, haz=\"loglogistic\", prop=function(x) 1, tol=1e-5, seed=get.seed(t1))\n  #expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\", \"Difference is below tolerance\")\n  \n  t1 <- assim(100, 1, 3, haz=\"weibull\")\n  t2 <- assim(100, 1, 3, haz=\"weibull\", prop=function(x) 1, tol=1e-5, seed=get.seed(t1))\n  #expect_equivalent(summary(as.numeric(t1)), summary(as.numeric(t2)))\n  \n  expectation(all(abs(t1-t2) < 2*attr(t2, \"tol\")), \"Difference is above tolerance\")\n})\n\n\ntest_that(\"Error is thrown for negative hazard\",{\n  expect_that(assim(100, 1, 3, haz=\"loglogistic\", add=-10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  expect_that(assim(100, 1, 3, haz=\"loglogistic\", add=function(x) -10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  \n  expect_that(assim(100, 1, 3, haz=\"weibull\", add=-10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  expect_that(assim(100, 1, 3, haz=\"weibull\", add=function(x) -10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  \n  expect_that(assim(100, 1, 3, haz=\"gompertz\", add=-10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  expect_that(assim(100, 1, 3, haz=\"gompertz\", add=function(x) -10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  \n  expect_that(assim(100, haz=atan, add=-10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n  expect_that(assim(100, haz=atan, add=function(x) -10, tol=1e-5), throws_error(\"Hazard function must be non-negative\"))\n})\n\ntest_that(\"Ex 3.3 in Austin (2014) works\",{\n  tol <- 1e-5\n  scale <- 1\n  shape <- 2\n  t1 <- 0.5\n  t2 <- 0.75\n  t3 <- 1\n  beta <- c(5,-1)\n  \n  betat <- 0.5\n  n <- 100000\n  X <- cbind(rep(0.2, n), rep(0.4, n))\n  linpred <- as.vector(X%*%beta)\n  \n  R1 <- cbind(0, scale*(exp(linpred))*t1^shape)\n  R2 <- cbind(scale*(exp(linpred))*t1^shape, scale*exp(linpred)*(t1^shape + exp(betat)*(t2^shape - t1^shape)))\n  R3 <- cbind(scale*exp(linpred)*(t1^shape + exp(betat)*(t2^shape - t1^shape)), scale*exp(linpred)*(t1^shape + exp(betat)*(t2^shape-t1^shape)+(t3^shape-t2^shape)))\n  R4 <- cbind(scale*exp(linpred)*(t1^shape + exp(betat)*(t2^shape-t1^shape)+(t3^shape-t2^shape)), Inf)\n  \n  \n  genfunc <- function(u){\n    lu <- -log(1-u)\n    n <- length(lu)\n    retvec <- rep(0, n)\n    for(i in 1:n){\n      if(lu[i] >= R1[i,1] & lu[i] < R1[i,2]){\n        retvec[i] <- (lu[i]/(scale*exp(linpred[i])))^(1/shape)\n      }else if(lu[i] >= R2[i,1] & lu[i] < R2[i,2]){\n        retvec[i] <-  ((lu[i]-scale*exp(linpred[i])*t1^shape + scale*exp(linpred[i] + betat)*t1^shape) / (scale*exp(linpred[i] + betat)))^(1/shape)\n      }else if(lu[i] >= R3[i,1] & lu[i] < R3[i,2]){\n        retvec[i] <-  ( (lu[i]-scale*exp(linpred[i])*t1^shape - scale*exp(linpred[i] + betat)*(t2^shape - t1^shape) + scale*exp(linpred[i])*t2^shape)/(scale*exp(linpred[i])))^(1/shape)\n      }else if(lu[i] >= R4[i,1] & lu[i] < R4[i,2]){\n        retvec[i] <- ((lu[i] - scale*exp(linpred[i])*t1^shape - scale*exp(linpred[i] + betat)*(t2^shape-t1^shape) \n                       - scale*exp(linpred[i])*(t3^shape - t2^shape) + scale*exp(linpred[i] + betat)*t3^shape) /(scale*exp(linpred[i] + betat)))^(1/shape)\n      }else{\n        print(i)\n        stop(\"Invalid time\")\n      }\n    }\n    return(retvec)\n  }\n  \n  propfunc <- function(t){\n    exp(beta[1]*X[1,1] + beta[2]*X[1,2] + betat*((t > t1 & t < t2) | (t > t3)))\n  }\n  \n  seed <- runif(1)*1e9\n  set.seed(seed)\n  n <- 100000\n  rand <- runif(n)\n  times1 <- genfunc(rand)\n  \n  times <- assim(n, scale, shape, haz=\"weibull\", prop=propfunc,  tol= tol, seed=seed)\n  \n  expectation(max(abs(times-times1)) < tol, \"Ex 3.3 is out of tolerance\", \"Ex 3.3 Works\")\n\n})\n\n\ntest_that(\"Ex 3.2.3 in Austin (2014) works\",{\n  # NOTE: The paper is wrong, shape > 0\n  tol <- 1e-5\n  scale <- 1\n  shape <- 2\n  t1 <- 0.5\n  t2 <- 0.75\n  t3 <- 1\n  beta <- c(1,1)\n  \n  betat <- 0\n  n <- 1000\n  X <- cbind(rep(0.2, n), rep(0.4, n))\n  linpred <- as.vector(X%*%beta)\n  \n  seed <- 798045908\n  \n  genfunc <- function(u){\n    return((1/(betat + shape))*log(1+ ((betat + shape)*(-log(1-u)))/(scale*exp(linpred))))\n  }\n  set.seed(seed)\n  rand <- runif(n)\n  timesE <- genfunc(rand)\n  \n  propfun <- function(t){\n    exp(beta[1]*X[1,1] + beta[2]*X[1,2] + betat*t)\n  }\n  \n  timesA <- assim(n, scale, shape, haz=\"gompertz\", prop=propfun, seed=seed, tol=tol, largest.vec=1e7, maxprob=1e-5)\n  \n  expectation(max(abs(timesA-timesE)) < tol, \"Ex 3.2.3 Failed\", \"Ex 3.2.3 works fine\")\n})",
    "created" : 1432306849284.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4248442272",
    "id" : "DD8385B1",
    "lastKnownWriteTime" : 1416858351,
    "path" : "C:/Users/lmcda4/Dropbox/addsim/assim/inst/tests/testing.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}