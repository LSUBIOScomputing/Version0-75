{
    "contents" : "library(testthat)\n### EXPECT ALL WILL GIVE THE SAME THING\n\ngeneratedata <- function(beta,alpha,gamma,X,T,n)  {\n  mean.vec <- exp(crossprod(t(X),beta))\n  y <- matrix(0,nrow=n,ncol=T)\n  y[,1] <- rnbinom(n,mu = mean.vec[1],size=mean.vec[1]/gamma)\n  for (i in 1:n)  {\n    for (t in 2:T)  {\n      innovation.mean <- mean.vec[t] - alpha*(sqrt(mean.vec[t]*mean.vec[t-1]))\n      I <- rnbinom(1,mu= innovation.mean,size= innovation.mean/gamma)           \n      first.shape <- alpha*sqrt(mean.vec[t]*mean.vec[t-1])/gamma\n      second.shape <- mean.vec[t-1]/gamma - first.shape\n      u <- rbeta(1,shape1 = first.shape,shape2=second.shape)\n      a <- rbinom(1,size=y[i,t-1],prob=u)\n      y[i,t] = a + I\n    }\n  }\n  longform <- c(t(y))\n  print(apply(y,2,mean))\n  simdata <- data.frame(count = longform, time = rep(X[,2],times=n),subject=rep(c(1:n),each=T))\n  return(simdata)\n}\n\nX <- cbind(rep(1,5),c(-.5,-.25,0,.25,.5))\ntestdat <- generatedata(beta=c(1,.5),alpha=.2,gamma=.5,X=X,T=5,n=3000)\nfar1 <- geem(count~ time, id=subject ,data = testdat, family=poisson(), corstr=\"ar1\")\nf1 <- family(far1)\n\nfar1 <- geem(count~ time, id=subject ,data = testdat, family=poisson, corstr=\"ar1\")\nf2 <- family(far1)\n\nfar1 <- geem(count~ time, id=subject ,data = testdat, family=\"poisson\", corstr=\"ar1\")\nf3 <- family(far1)\n\ntest_that(\"Three forms of poisson family are equivalent\",{\n  expect_equivalent(f1,f2)\n  expect_equivalent(f1,f3)\n})\n\n\nfar1 <- geem(count~ time, id=subject ,data = testdat, corstr=\"ar1\")\nf4 <- family(far1)\n\n\nfar1 <- geem(count~ time, id=subject ,family=\"gaussian\",data = testdat, corstr=\"ar1\")\nf5 <- family(far1)\n\nfar1 <- geem(count~ time, id=subject ,family=gaussian,data = testdat, corstr=\"ar1\")\nf6 <- family(far1)\n\nfar1 <- geem(count~ time, id=subject ,family=gaussian(),data = testdat, corstr=\"ar1\")\nf7 <- family(far1)\n\n\n\ntest_that(\"Default family comes up as gaussian\",{\n  expect_equivalent(f4,f5)\n  expect_equivalent(f4,f6)\n  expect_equivalent(f4,f7)\n})\n\ndata(\"ohio\", package=\"geepack\")\nresplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial,\n                  corstr = \"m-dep\" , Mv=1)\nf8 <- family(resplogit)\n\nresplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = \"binomial\",\n                  corstr = \"m-dep\" , Mv=1)\nf9 <- family(resplogit)\n\nresplogit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = binomial(),\n                  corstr = \"m-dep\" , Mv=1)\nf10 <- family(resplogit)\n\ntest_that(\"Binomial always comes up as binomial\",{\n  expect_equivalent(f8, f9)\n  expect_equivalent(f8, f10)\n})\n\nLinkFun <- function(arg){qcauchy(arg)}\nInvLink <- function(arg){pcauchy(arg)}\nInvLinkDeriv <- function(arg){dcauchy(arg)}\nVarFun <- function(arg){arg*(1-arg)}\nFunList <- list(LinkFun, VarFun, InvLink, InvLinkDeriv)\n\nrespcauchit <- geem(resp ~ age + smoke + age:smoke, id=id, data = ohio, family = FunList, corstr = \"m-dep\" , Mv=1)\n\ntest_that(\"user-defined link comes up as custom\",{\n  expect_equivalent(family(respcauchit)$family, \"custom\")\n})\n\n\n",
    "created" : 1432568649756.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2231104954",
    "id" : "70DE97AC",
    "lastKnownWriteTime" : 1432568694,
    "path" : "C:/Users/lmcda4/Dropbox/geeM/testfamily.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}